import { Ionicons } from "@expo/vector-icons";
import { NativeStackNavigationProp } from "@react-navigation/native-stack";
import React, { useState } from "react";
import {
  Alert,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";
import { Contract } from "../../types/contract";

type RootStackParamList = {
  TerminateContract: { contract: Contract };
  RoomList: undefined;
};

type TerminateContractScreenProps = {
  navigation: NativeStackNavigationProp<RootStackParamList>;
  route: { params: { contract: Contract } };
};

const TerminateContractScreen = ({
  navigation,
  route,
}: TerminateContractScreenProps) => {
  const { contract } = route.params;
  const [isLoading, setIsLoading] = useState(false);
  const [terminationReason, setTerminationReason] = useState("");
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!terminationReason.trim()) {
      newErrors.terminationReason = "L√Ω do k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleTerminate = async () => {
    if (!validateForm()) {
      Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p l√Ω do k·∫øt th√∫c h·ª£p ƒë·ªìng");
      return;
    }

    setIsLoading(true);

    try {
      // TODO: G·ªçi API k·∫øt th√∫c h·ª£p ƒë·ªìng
      await new Promise((resolve) => setTimeout(resolve, 2000)); // Simulate API call

      Alert.alert("Th√†nh c√¥ng", "ƒê√£ k·∫øt th√∫c h·ª£p ƒë·ªìng th√†nh c√¥ng!", [
        {
          text: "OK",
          onPress: () => navigation.navigate("RoomList"),
        },
      ]);
    } catch (error) {
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ k·∫øt th√∫c h·ª£p ƒë·ªìng");
    } finally {
      setIsLoading(false);
    }
  };

  const formatCurrency = (amount: number) => {
    return amount.toLocaleString("vi-VN");
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("vi-VN");
  };

  return (
    <View className="flex-1 bg-gray-50">
      <ScrollView
        className="flex-1 px-4 py-3"
        showsVerticalScrollIndicator={false}
      >
        {/* Header c·∫£nh b√°o */}
        <View className="bg-red-50 rounded-xl p-4 mb-3 border border-red-200">
          <View className="flex-row items-start">
            <Ionicons
              name="warning"
              size={24}
              color="#DC2626"
              className="mr-3 mt-1"
            />
            <View className="flex-1">
              <Text className="text-lg font-bold text-red-800 mb-2">
                K·∫øt th√∫c h·ª£p ƒë·ªìng
              </Text>
              <Text className="text-sm text-red-700">
                H√†nh ƒë·ªông n√†y s·∫Ω chuy·ªÉn ph√≤ng v·ªÅ tr·∫°ng th√°i tr·ªëng v√† kh√¥ng th·ªÉ
                ho√†n t√°c.
              </Text>
            </View>
          </View>
        </View>

        {/* Th√¥ng tin h·ª£p ƒë·ªìng */}
        <View className="bg-white rounded-xl p-4 mb-3 shadow-sm border border-gray-100">
          <Text className="text-lg font-bold text-gray-900 mb-4">
            Th√¥ng tin h·ª£p ƒë·ªìng
          </Text>

          <View className="space-y-3">
            <View className="flex-row justify-between items-center">
              <Text className="text-sm text-gray-600">M√£ h·ª£p ƒë·ªìng</Text>
              <Text className="text-sm font-semibold text-gray-900">
                #{contract.id}
              </Text>
            </View>

            <View className="flex-row justify-between items-center">
              <Text className="text-sm text-gray-600">Ph√≤ng</Text>
              <Text className="text-sm font-semibold text-gray-900">
                {contract.roomName} - {contract.buildingName}
              </Text>
            </View>

            <View className="flex-row justify-between items-center">
              <Text className="text-sm text-gray-600">Ng∆∞·ªùi thu√™</Text>
              <Text className="text-sm font-semibold text-gray-900">
                {contract.tenantName}
              </Text>
            </View>

            <View className="flex-row justify-between items-center">
              <Text className="text-sm text-gray-600">Th·ªùi h·∫°n</Text>
              <Text className="text-sm font-semibold text-gray-900">
                {formatDate(contract.startDate)} -{" "}
                {formatDate(contract.endDate)}
              </Text>
            </View>

            <View className="flex-row justify-between items-center">
              <Text className="text-sm text-gray-600">Ti·ªÅn thu√™</Text>
              <Text className="text-sm font-semibold text-gray-900">
                {formatCurrency(contract.monthlyRent)}ƒë/th√°ng
              </Text>
            </View>
          </View>
        </View>

        {/* L√Ω do k·∫øt th√∫c */}
        <View className="bg-white rounded-xl p-4 mb-3 shadow-sm border border-gray-100">
          <Text className="text-lg font-bold text-gray-900 mb-4">
            L√Ω do k·∫øt th√∫c *
          </Text>

          <View
            className={`bg-gray-50 rounded-lg border ${errors.terminationReason ? "border-red-300 bg-red-50" : "border-gray-200"}`}
          >
            <TextInput
              className="p-3 text-base text-gray-900 min-h-[100px]"
              value={terminationReason}
              onChangeText={(value) => {
                setTerminationReason(value);
                if (errors.terminationReason) {
                  setErrors((prev) => ({ ...prev, terminationReason: "" }));
                }
              }}
              placeholder="Nh·∫≠p l√Ω do k·∫øt th√∫c h·ª£p ƒë·ªìng..."
              placeholderTextColor="#9CA3AF"
              multiline
              numberOfLines={4}
              textAlignVertical="top"
            />
          </View>
          {errors.terminationReason && (
            <Text className="text-xs text-red-500 mt-1 ml-1">
              {errors.terminationReason}
            </Text>
          )}
        </View>

        {/* Th√¥ng tin ho√†n tr·∫£ */}
        <View className="bg-blue-50 rounded-xl p-4 mb-3 border border-blue-200">
          <Text className="text-lg font-bold text-blue-800 mb-4">
            Th√¥ng tin ho√†n tr·∫£
          </Text>

          <View className="space-y-3">
            <View className="flex-row justify-between items-center">
              <Text className="text-sm text-blue-700">Ti·ªÅn c·ªçc</Text>
              <Text className="text-sm font-semibold text-blue-800">
                {formatCurrency(contract.deposit)}ƒë
              </Text>
            </View>

            <View className="flex-row justify-between items-center">
              <Text className="text-sm text-blue-700">D·ªãch v·ª• ƒë√£ tr·∫£</Text>
              <Text className="text-sm font-semibold text-blue-800">
                {formatCurrency(
                  contract.services
                    .filter((service) => service.isIncluded)
                    .reduce((sum, service) => sum + service.price, 0)
                )}
                ƒë
              </Text>
            </View>

            <View className="border-t border-blue-200 pt-3">
              <View className="flex-row justify-between items-center">
                <Text className="text-base font-semibold text-blue-800">
                  T·ªïng ho√†n tr·∫£
                </Text>
                <Text className="text-lg font-bold text-blue-600">
                  {formatCurrency(
                    contract.deposit +
                      contract.services
                        .filter((service) => service.isIncluded)
                        .reduce((sum, service) => sum + service.price, 0)
                  )}
                  ƒë
                </Text>
              </View>
            </View>
          </View>

          <View className="mt-3 p-3 bg-blue-100 rounded-lg">
            <Text className="text-xs text-blue-800">
              üí° L∆∞u √Ω: S·ªë ti·ªÅn ho√†n tr·∫£ s·∫Ω ƒë∆∞·ª£c t√≠nh to√°n d·ª±a tr√™n th·ªùi gian s·ª≠
              d·ª•ng th·ª±c t·∫ø v√† t√¨nh tr·∫°ng ph√≤ng.
            </Text>
          </View>
        </View>

        {/* C√°c l√Ω do ph·ªï bi·∫øn */}
        <View className="bg-white rounded-xl p-4 mb-3 shadow-sm border border-gray-100">
          <Text className="text-lg font-bold text-gray-900 mb-4">
            L√Ω do ph·ªï bi·∫øn
          </Text>

          <View className="space-y-2">
            {[
              "H·∫øt h·∫°n h·ª£p ƒë·ªìng",
              "Ng∆∞·ªùi thu√™ t·ª± √Ω ch·∫•m d·ª©t",
              "Vi ph·∫°m quy ƒë·ªãnh thu√™",
              "B·∫£o tr√¨, s·ª≠a ch·ªØa ph√≤ng",
              "Thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng",
              "Kh√°c",
            ].map((reason, index) => (
              <TouchableOpacity
                key={index}
                className="p-3 bg-gray-50 rounded-lg border border-gray-200"
                onPress={() => setTerminationReason(reason)}
              >
                <Text className="text-sm text-gray-700">{reason}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>
      </ScrollView>

      {/* Floating Action Button */}
      <View className="absolute bottom-6 right-6">
        <TouchableOpacity
          className="w-16 h-16 rounded-full bg-red-500 items-center justify-center shadow-lg"
          onPress={handleTerminate}
          disabled={isLoading}
        >
          {isLoading ? (
            <View className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin" />
          ) : (
            <Ionicons name="checkmark" size={28} color="#FFFFFF" />
          )}
        </TouchableOpacity>
      </View>

      {/* Back Button */}
      <TouchableOpacity
        className="absolute top-16 left-4 w-10 h-10 rounded-full bg-white/90 items-center justify-center shadow-md"
        onPress={() => navigation.goBack()}
        disabled={isLoading}
      >
        <Ionicons name="arrow-back" size={20} color="#374151" />
      </TouchableOpacity>
    </View>
  );
};

export default TerminateContractScreen;
