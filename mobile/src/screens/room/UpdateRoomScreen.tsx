import { getRoom, updateRoom } from "@/api/room/room.api";
import ActionButtonBottom from "@/components/ActionButtonBottom";
import CardContent from "@/components/CardContent";
import InputBase from "@/components/Input";
import { RoomDetailResponse, RoomUpdateRequest } from "@/types/room";
import { formatCurrency } from "@/utils/appUtil";
import { NativeStackNavigationProp } from "@react-navigation/native-stack";
import React from "react";
import { Controller, useForm } from "react-hook-form";
import { Alert, ScrollView, Text, View } from "react-native";
import Toast from "react-native-toast-message";

type RootStackParamList = {
  UpdateRoom: { roomId: string };
  RoomList: undefined;
};

type UpdateRoomScreenProps = {
  navigation: NativeStackNavigationProp<RootStackParamList>;
  route: { params: { roomId: any } };
};

const UpdateRoomScreen = ({ navigation, route }: UpdateRoomScreenProps) => {
  const { roomId } = route.params;

  const {
    handleSubmit,
    formState: { isLoading, defaultValues, errors: erroForms },
    control,
  } = useForm<RoomDetailResponse>({
    defaultValues: async () => {
      try {
        const data = await getRoom(roomId);
        if (!data.data) return {} as any;

        return data.data;
      } catch (error: any) {
        Toast.show({
          type: "error",
          text1: "L·ªói",
          text2: error.response.data?.message
            ? error.response.data?.message
            : "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu",
        });
        navigation.goBack();
      }
    },
  });

  const statusOptions = [
    {
      value: "ƒêang thu√™",
      label: "ƒêang thu√™",
      color: "#34C759",
      icon: "checkmark-circle",
    },
    {
      value: "Tr·ªëng",
      label: "Tr·ªëng",
      color: "#FF9500",
      icon: "ellipse-outline",
    },
    {
      value: "ƒêang s·ª≠a",
      label: "ƒêang s·ª≠a",
      color: "#FF3B30",
      icon: "construct",
    },
  ];

  const handleSave = async (data: RoomUpdateRequest) => {
    try {
      updateRoom(data)
        .then((reponse) => {
          Toast.show({
            type: "success",
            text1: "Th√†nh c√¥ng",
            text2: "C·∫≠p nh·∫≠t ƒë√£ th√†nh c√¥ng",
          });
          navigation.goBack();
        })
        .catch(() => {
          Toast.show({
            type: "error",
            text1: "Th·∫•t b·∫°i",
            text2: "Vui l√≤ng th·ª≠ l·∫°i sau!",
          });
        });
    } catch (error) {
      console.error("üíûüíìüíóüíûüíìüíó ~ handleSave ~ error:", error);
      Toast.show({
        type: "error",
        text1: "Th·∫•t b·∫°i",
        text2: "Vui l√≤ng th·ª≠ l·∫°i sau!",
      });
    }
  };

  const handleError = () => {
    Toast.show({
      type: "error",
      text1: "L·ªói",
      text2: "H√£y nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin l·∫°i th√¥ng tin!",
    });
  };

  const handleDelete = () => {
    Alert.alert(
      "X√°c nh·∫≠n x√≥a",
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph√≤ng "${null}"?\n\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.`,
      [
        {
          text: "H·ªßy",
          style: "cancel",
        },
        {
          text: "X√≥a",
          style: "destructive",
          onPress: async () => {
            try {
              // TODO: G·ªçi API x√≥a ph√≤ng
              await new Promise((resolve) => setTimeout(resolve, 2000));
              Alert.alert("Th√†nh c√¥ng", "ƒê√£ x√≥a ph√≤ng th√†nh c√¥ng!", [
                {
                  text: "OK",
                  onPress: () => navigation.navigate("RoomList"),
                },
              ]);
            } catch (error) {
              Alert.alert("L·ªói", "Kh√¥ng th·ªÉ x√≥a ph√≤ng");
            } finally {
            }
          },
        },
      ]
    );
  };

  return (
    <View className="flex-1 bg-gray-50">
      <ScrollView
        className="flex-1 px-4 py-3"
        showsVerticalScrollIndicator={false}
      >
        {/* Compact Header */}
        <CardContent>
          <View className="flex-row justify-between items-start">
            <View className="flex-1">
              <Text className="text-xl font-bold text-gray-900 mb-1">
                {defaultValues?.name}
              </Text>
              <Text className="text-sm text-gray-600 mb-2">
                {defaultValues?.property?.name}
              </Text>
              <View className="flex-row items-center">
                <View
                  className={`px-3 py-1 rounded-full ${getStatusBgClass(
                    "ƒêang thu√™"
                  )}`}
                >
                  <Text
                    className={`text-xs font-semibold ${getStatusTextClass(
                      "ƒêang thu√™"
                    )}`}
                  >
                    ƒêang thu√™
                  </Text>
                </View>
              </View>
            </View>
            <View className="items-end">
              <Text className="text-xs text-gray-500 mb-1">Gi√° hi·ªán t·∫°i</Text>
              <Text className="text-lg font-bold text-blue-600">
                {defaultValues?.rentAmount?.toLocaleString()}ƒë
              </Text>
            </View>
          </View>
        </CardContent>

        {/* Compact Form */}
        <CardContent>
          <Text className="text-lg font-bold text-gray-900 mb-4">
            Th√¥ng tin c∆° b·∫£n
          </Text>

          <View className="mb-3">
            <Controller
              control={control}
              name="name"
              rules={{ required: "Vui l√≤ng nh·∫≠p t√™n g·ª£i nh·ªõ" }}
              render={({ field: { onChange, value } }) => (
                <InputBase
                  placeholder="Nh·∫≠p t√™n g·ª£i nh·ªõ (kh√¥ng b·∫Øt bu·ªôc)"
                  value={value}
                  required
                  onChangeText={onChange}
                  icon="home"
                  label="T√™n g·ª£i nh·ªõ"
                  error={erroForms.name?.message}
                />
              )}
            />
          </View>

          {/* T√≤a nh√† */}
          <View className="mb-3">
            <Controller
              control={control}
              name="propertyName"
              render={({ field: { onChange, value } }) => (
                <InputBase
                  readOnly
                  placeholder="Nh·∫≠p t√™n g·ª£i nh·ªõ (kh√¥ng b·∫Øt bu·ªôc)"
                  value={value}
                  showClear={false}
                  onChangeText={onChange}
                  icon="business"
                  label="To√† nh√†"
                />
              )}
            />
          </View>

          {/* Gi√° v√† Di·ªán t√≠ch - 2 c·ªôt */}
          <View className="flex-row gap-3">
            <View className="flex-1 mb-3">
              <Controller
                control={control}
                name="maxOccupancy"
                render={({ field: { onChange, value } }) => (
                  <InputBase
                    type="number"
                    placeholder="S·ªë ng∆∞·ªùi"
                    value={value?.toString()}
                    keyboardType="numeric"
                    onChangeText={onChange}
                    icon="people"
                    label="S·ªë ng∆∞·ªùi"
                    error={erroForms.maxOccupancy?.message}
                  />
                )}
              />
            </View>

            <View className="flex-1 mb-3">
              <Controller
                control={control}
                name="area"
                render={({ field: { onChange, value } }) => (
                  <InputBase
                    type="number"
                    placeholder="Di·ªán t√≠ch"
                    value={value?.toString()}
                    keyboardType="numeric"
                    onChangeText={onChange}
                    icon="resize"
                    label="Di·ªán t√≠ch"
                    error={erroForms.area?.message}
                  />
                )}
              />
            </View>
          </View>

          {/* S·ªë ng∆∞·ªùi thu√™ */}
          <View className="mb-3">
            <Controller
              control={control}
              name="defaultDepositAmount"
              rules={{ required: "VNƒê/th√°ng" }}
              render={({ field: { onChange, value } }) => (
                <InputBase
                  type="number"
                  placeholder="VNƒê/th√°ng"
                  value={value ? formatCurrency(value.toString()) : ""}
                  keyboardType="numeric"
                  required
                  onChangeText={onChange}
                  icon="cash"
                  label="Gi√° thu√™ m·∫∑c ƒë·ªãnh"
                  error={erroForms.defaultDepositAmount?.message}
                />
              )}
            />
          </View>
        </CardContent>

        {/* Tr·∫°ng th√°i - Compact */}
        {/* <CardContent>
          <Text className="text-lg font-bold text-gray-900 mb-3">
            Tr·∫°ng th√°i ph√≤ng
          </Text>
          <View className="gap-2">
            {statusOptions.map((option) => (
              <TouchableOpacity
                key={option.value}
                className={`flex-row items-center p-3 rounded-lg border ${
                  formData.status === option.value
                    ? "bg-blue-50 border-blue-300"
                    : "bg-gray-50 border-gray-200"
                }`}
                onPress={() => updateFormData("status", option.value)}
              >
                <Ionicons
                  name={option.icon as any}
                  size={20}
                  color={
                    formData.status === option.value ? "#007AFF" : option.color
                  }
                  className="mr-3"
                />
                <Text
                  className={`text-base font-medium ${
                    formData.status === option.value
                      ? "text-blue-600"
                      : "text-gray-700"
                  }`}
                >
                  {option.label}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
        </CardContent> */}

        {/* M√¥ t·∫£ - Compact */}
        <CardContent>
          <Controller
            control={control}
            name="description"
            rules={{ required: "M√¥ t·∫£" }}
            render={({ field: { onChange, value } }) => (
              <InputBase
                type="area"
                placeholder="M√¥ t·∫£"
                value={value ? formatCurrency(value.toString()) : ""}
                required
                onChangeText={onChange}
                label="M√¥ t·∫£"
                error={erroForms.description?.message}
              />
            )}
          />
        </CardContent>
      </ScrollView>

      <ActionButtonBottom
        actions={[
          {
            label: "L∆∞u thay ƒë·ªïi",
            onPress: handleSubmit(handleSave, handleError),
            variant: "primary",
            isLoading: isLoading,
            icon: "checkmark-circle",
          },
          {
            label: "Xo√° ph√≤ng",
            onPress: handleSubmit(handleSave, handleError),
            variant: "secondary",
            isLoading: isLoading,
            icon: "trash-outline",
          },
        ]}
      />
    </View>
  );
};

const getStatusBgClass = (status: string) => {
  switch (status) {
    case "ƒêang thu√™":
      return "bg-green-100";
    case "Tr·ªëng":
      return "bg-orange-100";
    case "ƒêang s·ª≠a":
      return "bg-red-100";
    default:
      return "bg-blue-100";
  }
};

const getStatusTextClass = (status: string) => {
  switch (status) {
    case "ƒêang thu√™":
      return "text-green-700";
    case "Tr·ªëng":
      return "text-orange-700";
    case "ƒêang s·ª≠a":
      return "text-red-700";
    default:
      return "text-blue-700";
  }
};

export default UpdateRoomScreen;
