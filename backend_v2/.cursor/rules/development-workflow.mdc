---
alwaysApply: true
---

# Development Workflow

## Development Commands

- `npm run start:dev` - Start development server with hot reload
- `npm run start:debug` - Start with debugging enabled
- `npm run build` - Build for production
- `npm run start:prod` - Start production server

## Code Quality

- `npm run lint` - Run ESLint with auto-fix
- `npm run format` - Format code with Prettier
- ESLint config: [eslint.config.mjs](mdc:eslint.config.mjs)
- Prettier config: [.prettierrc](mdc:.prettierrc)

## Database Operations

- `npm run migration:generate` - Generate new migration
- `npm run migration:run` - Apply pending migrations
- `npm run migration:revert` - Rollback last migration
- Migration config: [typeorm.config.ts](mdc:typeorm.config.ts)

## Environment Setup

- Copy `.env.example` to `.env` and configure environment variables
- Ensure PostgreSQL database is running
- Run migrations before starting the application

## Git Workflow

- Follow conventional commit messages
- Run linting and tests before committing
- Keep commits focused and atomic
- Use meaningful branch names

## Code Review Checklist

- [ ] Code follows TypeScript conventions
- [ ] Proper error handling implemented
- [ ] DTOs have validation decorators
- [ ] Database relationships are properly defined
- [ ] Tests are written for new functionality
- [ ] API documentation is updated
- [ ] No console.log statements in production code
- [ ] Environment variables are properly configured

## Performance Considerations

- Use database indexes for frequently queried fields
- Implement pagination for list endpoints
- Use proper TypeORM query optimization
- Monitor database query performance
- Implement caching where appropriate

## Security Best Practices

- Validate all input data with DTOs
- Use parameterized queries (TypeORM handles this)
- Implement proper authentication and authorization
- Sanitize user input
- Use HTTPS in production
- Keep dependencies updated
