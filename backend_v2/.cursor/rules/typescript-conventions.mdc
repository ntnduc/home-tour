---
globs: *.ts,*.tsx
---

# TypeScript Coding Conventions

## Import Organization

- Group imports in this order:
  1. NestJS imports (`@nestjs/*`)
  2. Third-party libraries
  3. Internal imports (relative paths starting with `src/`)
  4. Local imports (relative paths with `./` or `../`)

## Naming Conventions

- **Classes**: PascalCase (e.g., `PropertyService`, `UserEntity`)
- **Interfaces**: PascalCase with `I` prefix for service interfaces (e.g., `IBaseService`)
- **Enums**: PascalCase (e.g., `PropertyRoomsStatus`, `RoomStatus`)
- **Files**: kebab-case with descriptive suffixes (e.g., `property.service.ts`, `user.entity.ts`)
- **DTOs**: PascalCase ending with `Dto` (e.g., `PropertyCreateDto`, `UserDetailDto`)

## Service Layer Patterns

- Extend `BaseService` for standard CRUD operations
- Implement `IBaseService` interface
- Use dependency injection with `@Injectable()` decorator
- Inject repositories with `@InjectRepository()` decorator

## Entity Patterns

- Extend `BaseEntity` for common fields (id, createdAt, updatedAt)
- Use TypeORM decorators (`@Entity`, `@Column`, `@ManyToOne`, etc.)
- Define relationships clearly with proper cascade options

## DTO Patterns

- Create separate DTOs for different operations:
  - `[Feature]CreateDto` for creation
  - `[Feature]UpdateDto` for updates
  - `[Feature]DetailDto` for detailed responses
  - `[Feature]ListDto` for list responses
- Use class-validator decorators for validation
- Use class-transformer decorators for serialization

## Error Handling

- Use NestJS built-in exceptions (`NotFoundException`, `BadRequestException`, etc.)
- Throw meaningful error messages
- Use try-catch blocks for database operations

## TypeScript Configuration

- Target ES2023 as configured in [tsconfig.json](mdc:tsconfig.json)
- Use strict null checks
- Enable decorator metadata and experimental decorators
