---
globs: *.entity.ts,*repository.ts,*migration*.ts
---

# Database Patterns and TypeORM Guidelines

## Entity Design

- All entities must extend [BaseEntity](mdc:src/common/base/Entity/base.entity.ts)
- Use proper TypeORM decorators:
  - `@Entity()` for class declaration
  - `@PrimaryGeneratedColumn('uuid')` for primary keys
  - `@Column()` with appropriate types
  - `@CreateDateColumn()` and `@UpdateDateColumn()` (inherited from BaseEntity)

## Relationships

- Use proper relationship decorators:
  - `@OneToMany()` / `@ManyToOne()` for parent-child relationships
  - `@ManyToMany()` with `@JoinTable()` for many-to-many
  - Always specify `cascade` options carefully
  - Use `eager: false` by default, load relations explicitly when needed

## Repository Pattern

- Extend [BaseRepository](mdc:src/common/base/repositories/base.repository.ts)
- Create custom repository classes in `repositories/` folder
- Use QueryBuilder for complex queries
- Implement proper error handling

## Migration Guidelines

- Use TypeORM CLI commands from [package.json](mdc:package.json):
  - `npm run migration:generate` to create new migrations
  - `npm run migration:run` to apply migrations
  - `npm run migration:revert` to rollback
- Store migrations in [database/migrations/](mdc:src/database/migrations/)
- Use descriptive migration names with timestamps

## Database Configuration

- Main config in [typeorm.config.ts](mdc:typeorm.config.ts)
- Environment-specific settings in [database.config.ts](mdc:src/config/database.config.ts)
- Use PostgreSQL as the primary database

## Query Optimization

- Use `SelectQueryBuilder` for complex queries
- Implement proper indexing in entity definitions
- Use pagination for list endpoints
- Avoid N+1 query problems with proper eager loading or joins

## Example Entity Structure

```typescript
@Entity('table_name')
export class ExampleEntity extends BaseEntity {
  @Column({ type: 'varchar', length: 255 })
  name: string;

  @ManyToOne(() => ParentEntity, (parent) => parent.children)
  parent: ParentEntity;

  @OneToMany(() => ChildEntity, (child) => child.parent)
  children: ChildEntity[];
}
```
