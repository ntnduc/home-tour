---
globs: *.controller.ts,*.service.ts,*dto*.ts
---

# API Development Guidelines

## Controller Patterns

- Extend [BaseController](mdc:src/common/base/crud/base.controller.ts) for standard CRUD operations
- Use proper HTTP decorators (`@Get()`, `@Post()`, `@Put()`, `@Delete()`)
- Implement Swagger documentation with `@ApiTags()`, `@ApiOperation()`, etc.
- Use DTOs for request/response validation

## Service Layer

- Business logic belongs in service classes
- Services should extend [BaseService](mdc:src/common/base/crud/base.service.ts)
- Implement proper error handling and validation
- Use transactions for complex operations

## Authentication & Authorization

- Use [JWT strategy](mdc:src/modules/auth/strategies/jwt-temp.strategy.ts) for authentication
- Apply `@UseGuards(JwtAuthGuard)` for protected endpoints
- Use [@AllowAnonymous](mdc:src/common/decorators/allow-anonymous.decorator.ts) decorator for public endpoints
- Access current user with [@CurrentUser](mdc:src/modules/current.user/current-user.decorator.ts) decorator

## DTO Validation

- Use class-validator decorators:
  - `@IsString()`, `@IsNumber()`, `@IsEmail()` for type validation
  - `@IsOptional()` for optional fields
  - `@IsNotEmpty()` for required fields
  - `@Transform()` for data transformation
- Create separate DTOs for different operations (Create, Update, Detail, List)

## Response Formatting

- Use [BaseResponse](mdc:src/common/reponse/base.response.ts) for consistent API responses
- Apply [TransformInterceptor](mdc:src/common/interceptors/transform.interceptor.ts) globally
- Handle errors with [HttpExceptionFilter](mdc:src/common/filter/http-exception.filter.ts)

## API Endpoints Structure

```typescript
@Controller('api/v1/resource')
@ApiTags('Resource')
export class ResourceController extends BaseController<...> {
  @Get()
  @ApiOperation({ summary: 'Get all resources' })
  async findAll(@Query() query: ResourceListDto) {
    return this.service.findAll(query);
  }

  @Post()
  @ApiOperation({ summary: 'Create resource' })
  async create(@Body() dto: ResourceCreateDto) {
    return this.service.create(dto);
  }
}
```

## Request Context

- Use [RequestContextService](mdc:src/common/base/context/request-context.service.ts) for request-scoped data
- Apply [RequestContextInterceptor](mdc:src/common/interceptors/request-context.interceptor.ts) for context management
